import std.test (Tests)
import uuid (Uuid)

fn pub tests(t: mut Tests) {
  t.test('Uuid.nil', fn (t) {
    t.equal(Uuid.nil.to_string, '00000000-0000-0000-0000-000000000000')
  })

  t.test('Uuid.max', fn (t) {
    t.equal(Uuid.max.to_string, 'ffffffff-ffff-ffff-ffff-ffffffffffff')
  })

  t.test('Uuid.new_v4', fn (t) {
    let uuid = Uuid.new_v4

    t.equal(uuid.to_string.size, 36)

    let bytes = uuid.into_byte_array

    t.equal(bytes.get(6) & 0xF0, 0x40)
    t.equal(bytes.get(8) & 0xC0, 0x80)
  })

  # https://www.rfc-editor.org/rfc/rfc9562.html#name-example-of-a-uuidv4-value
  t.test('Uuid.new_v4 against RFC 9562 test vector', fn (t) {
    let bytes = ByteArray.new

    bytes.push(0x91)
    bytes.push(0x91)
    bytes.push(0x08)
    bytes.push(0xF7)
    bytes.push(0x52)
    bytes.push(0xD1)
    bytes.push(0x33)
    bytes.push(0x20)
    bytes.push(0x5B)
    bytes.push(0xAC)
    bytes.push(0xF8)
    bytes.push(0x47)
    bytes.push(0xDB)
    bytes.push(0x41)
    bytes.push(0x48)
    bytes.push(0xA8)

    let uuid = Uuid._v4_from_bytes(bytes)

    t.equal(uuid.to_string, '919108f7-52d1-4320-9bac-f847db4148a8')
  })

  t.test('Uuid.new_v7', fn (t) {
    let uuid = Uuid.new_v7

    t.equal(uuid.to_string.size, 36)

    let bytes = uuid.into_byte_array

    t.equal(bytes.get(6) & 0xF0, 0x70)
    t.equal(bytes.get(8) & 0xC0, 0x80)
  })

  # https://www.rfc-editor.org/rfc/rfc9562.html#name-example-of-a-uuidv7-value
  t.test('Uuid.new_v7 against RFC 9562 test vector', fn (t) {
    let msecs = 1645557742000

    let bytes = ByteArray.filled(with: 0, times: 6) # Allocate space for msecs.

    # This position originally contains a 4-bit ver field (0x4)
    # and a 12-bit rand_a field (0xCC3) in the test vector.
    # Here, we set the ver field to 0x0 to verify correct bit swapping.
    bytes.push(0x0C)
    bytes.push(0xC3)

    # Same as above: set the var field in the top 2 bits to 0b00 (originally 0b10).
    bytes.push(0x18)

    bytes.push(0xC4)
    bytes.push(0xDC)
    bytes.push(0x0C)
    bytes.push(0x0C)
    bytes.push(0x07)
    bytes.push(0x39)
    bytes.push(0x8F)

    let uuid = Uuid._v7_from_parts(msecs, bytes)

    t.equal(uuid.to_string.to_upper, '017F22E2-79B0-7CC3-98C4-DC0C0C07398F')
  })

  # https://www.rfc-editor.org/rfc/rfc9562.html#name-example-of-a-uuidv8-value-n
  t.test('Uuid.new_v8 against RFC 9562 test vector', fn (t) {
    let bytes = ByteArray.new

    # SHA-256: 5c146b143c524afd938a375d0df1fbf6fe12a66b645f72f6158759387e51f3c8
    bytes.push(0x5C)
    bytes.push(0x14)
    bytes.push(0x6B)
    bytes.push(0x14)
    bytes.push(0x3C)
    bytes.push(0x52)
    bytes.push(0x4A)
    bytes.push(0xFD)
    bytes.push(0x93)
    bytes.push(0x8A)
    bytes.push(0x37)
    bytes.push(0x5D)
    bytes.push(0x0D)
    bytes.push(0xF1)
    bytes.push(0xFB)
    bytes.push(0xF6)
    bytes.push(0xFE)
    bytes.push(0x12)
    bytes.push(0xA6)
    bytes.push(0x6B)
    bytes.push(0x64)
    bytes.push(0x5F)
    bytes.push(0x72)
    bytes.push(0xF6)
    bytes.push(0x15)
    bytes.push(0x87)
    bytes.push(0x59)
    bytes.push(0x38)
    bytes.push(0x7E)
    bytes.push(0x51)
    bytes.push(0xF3)
    bytes.push(0xC8)

    let uuid = Uuid.v8_from_bytes(bytes)

    t.equal(uuid.to_string, '5c146b14-3c52-8afd-938a-375d0df1fbf6')
  })
}
