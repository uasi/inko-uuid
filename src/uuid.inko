import std.byte_array (IntoByteArray, ToByteArray)
import std.int (Format)
import std.rand (Random)
import std.range (InclusiveRange)
import std.string (StringBuffer, ToString)
import std.time (DateTime)

class pub Uuid {
  let @bytes: ByteArray

  fn pub static nil -> Uuid {
    Uuid(ByteArray.filled(with: 0, times: 16))
  }

  fn pub static max -> Uuid {
    Uuid(ByteArray.filled(with: 0xFF, times: 16))
  }

  fn pub static new_v4 -> Uuid {
    Uuid._v4_from_bytes(Random.new.bytes(16))
  }

  # Internal: exposed only for unit testing.
  fn pub static _v4_from_bytes(bytes: ByteArray) -> Uuid {
    bytes.set(6, (bytes.get(6) & 0x0F) | 0x40)
    bytes.set(8, (bytes.get(8) & 0x3F) | 0x80)

    Uuid(bytes)
  }

  fn pub static new_v7 -> Uuid {
    let msecs = DateTime.new.to_int * 1000
    let bytes = Random.new.bytes(16)

    Uuid._v7_from_parts(msecs, bytes)
  }

  # Internal: exposed only for unit testing.
  fn pub static _v7_from_parts(msecs: Int, bytes: ByteArray) -> Uuid {
    0.to(5).iter.each(fn (i) { bytes.set(i, (msecs >> ((5 - i) * 8)) & 0xFF) })

    bytes.set(6, (bytes.get(6) & 0x0F) | 0x70)
    bytes.set(8, (bytes.get(8) & 0x3F) | 0x80)

    Uuid(bytes)
  }

  fn pub static v8_from_bytes(bytes: ByteArray) -> Uuid {
    bytes.resize(size: 16, value: 0)

    bytes.set(6, (bytes.get(6) & 0x0F) | 0x80)
    bytes.set(8, (bytes.get(8) & 0x3F) | 0x80)

    Uuid(bytes)
  }
}

impl IntoByteArray for Uuid {
  fn pub move into_byte_array -> ByteArray {
    @bytes
  }
}

impl ToByteArray for Uuid {
  fn pub to_byte_array -> ByteArray {
    @bytes.clone
  }
}

impl ToString for Uuid {
  fn pub to_string -> String {
    let buffer = StringBuffer.new

    push_hex(bytes: @bytes, range: 0.to(3), to: buffer)
    buffer.push('-')
    push_hex(bytes: @bytes, range: 4.to(5), to: buffer)
    buffer.push('-')
    push_hex(bytes: @bytes, range: 6.to(7), to: buffer)
    buffer.push('-')
    push_hex(bytes: @bytes, range: 8.to(9), to: buffer)
    buffer.push('-')
    push_hex(bytes: @bytes, range: 10.to(15), to: buffer)

    buffer.to_string
  }
}

fn push_hex(bytes: ref ByteArray, range: InclusiveRange, to: mut StringBuffer) {
  range.iter.each(fn (i) {
    let hex = bytes.get(i).format(Format.Hex).pad_start(with: '0', chars: 2)

    to.push(hex)
  })
}
